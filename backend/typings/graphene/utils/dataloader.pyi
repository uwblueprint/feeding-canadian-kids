from _typeshed import Incomplete
from typing import NamedTuple

class Loader(NamedTuple):
    key: Incomplete
    future: Incomplete

def iscoroutinefunctionorpartial(fn): ...

class DataLoader:
    batch: bool
    max_batch_size: int
    cache: bool
    batch_load_fn: Incomplete
    get_cache_key: Incomplete
    def __init__(
        self,
        batch_load_fn: Incomplete | None = None,
        batch: Incomplete | None = None,
        max_batch_size: Incomplete | None = None,
        cache: Incomplete | None = None,
        get_cache_key: Incomplete | None = None,
        cache_map: Incomplete | None = None,
        loop: Incomplete | None = None,
    ) -> None: ...
    @property
    def loop(self): ...
    def load(self, key: Incomplete | None = None): ...
    def do_resolve_reject(self, key, future) -> None: ...
    def load_many(self, keys): ...
    def clear(self, key): ...
    def clear_all(self): ...
    def prime(self, key, value): ...

def enqueue_post_future_job(loop, loader) -> None: ...
def get_chunks(iterable_obj, chunk_size: int = 1): ...
def dispatch_queue(loader) -> None: ...
async def dispatch_queue_batch(loader, queue): ...
def failed_dispatch(loader, queue, error) -> None: ...
