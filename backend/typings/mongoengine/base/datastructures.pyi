from _typeshed import Incomplete
from bson import DBRef
from collections.abc import Generator

__all__ = ['BaseDict', 'StrictDict', 'BaseList', 'EmbeddedDocumentList', 'LazyReference']

class BaseDict(dict):
    def __init__(self, dict_items, instance, name) -> None: ...
    def get(self, key, default: Incomplete | None = None): ...
    def __getitem__(self, key): ...
    __setitem__: Incomplete
    __delattr__: Incomplete
    __delitem__: Incomplete
    pop: Incomplete
    clear: Incomplete
    update: Incomplete
    popitem: Incomplete
    setdefault: Incomplete

class BaseList(list):
    def __init__(self, list_items, instance, name) -> None: ...
    def __getitem__(self, key): ...
    def __iter__(self): ...
    def __setitem__(self, key, value) -> None: ...
    append: Incomplete
    extend: Incomplete
    insert: Incomplete
    pop: Incomplete
    remove: Incomplete
    reverse: Incomplete
    sort: Incomplete
    __delitem__: Incomplete
    __iadd__: Incomplete
    __imul__: Incomplete

class EmbeddedDocumentList(BaseList):
    def __init__(self, list_items, instance, name) -> None: ...
    def filter(self, **kwargs): ...
    def exclude(self, **kwargs): ...
    def count(self): ...
    def get(self, **kwargs): ...
    def first(self): ...
    def create(self, **values): ...
    def save(self, *args, **kwargs) -> None: ...
    def delete(self): ...
    def update(self, **update): ...

class StrictDict:
    def __init__(self, **kwargs) -> None: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def __contains__(self, key) -> bool: ...
    def get(self, key, default: Incomplete | None = None): ...
    def pop(self, key, default: Incomplete | None = None): ...
    def iteritems(self) -> Generator[Incomplete, None, None]: ...
    def items(self): ...
    def iterkeys(self): ...
    def keys(self): ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    @classmethod
    def create(cls, allowed_keys): ...

class LazyReference(DBRef):
    def fetch(self, force: bool = False): ...
    @property
    def pk(self): ...
    document_type: Incomplete
    passthrough: Incomplete
    def __init__(self, document_type, pk, cached_doc: Incomplete | None = None, passthrough: bool = False) -> None: ...
    def __getitem__(self, name): ...
    def __getattr__(self, name): ...
