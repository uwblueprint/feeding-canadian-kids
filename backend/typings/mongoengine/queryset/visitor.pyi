from _typeshed import Incomplete
from mongoengine.errors import InvalidQueryError

__all__ = ["Q", "QNode"]

class QNodeVisitor:
    def visit_combination(self, combination): ...
    def visit_query(self, query): ...

class DuplicateQueryConditionsError(InvalidQueryError): ...

class SimplificationVisitor(QNodeVisitor):
    def visit_combination(self, combination): ...

class QueryCompilerVisitor(QNodeVisitor):
    document: Incomplete
    def __init__(self, document) -> None: ...
    def visit_combination(self, combination): ...
    def visit_query(self, query): ...

class QNode:
    AND: int
    OR: int
    def to_query(self, document): ...
    def accept(self, visitor) -> None: ...
    @property
    def empty(self): ...
    def __or__(self, other): ...
    def __and__(self, other): ...

class QCombination(QNode):
    operation: Incomplete
    children: Incomplete
    def __init__(self, operation, children) -> None: ...
    def __bool__(self) -> bool: ...
    def accept(self, visitor): ...
    @property
    def empty(self): ...
    def __eq__(self, other): ...

class Q(QNode):
    query: Incomplete
    def __init__(self, **query) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other): ...
    def accept(self, visitor): ...
    @property
    def empty(self): ...
