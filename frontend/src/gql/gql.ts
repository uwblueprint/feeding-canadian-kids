/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    mutation ForgotPassword($email: String!) {\n      forgotPassword(email: $email) {\n        success\n      }\n    }\n  ": types.ForgotPasswordDocument,
    "\n  mutation OnboardRequest($userInfo: UserInfoInput!) {\n    createOnboardingRequest(userInfo: $userInfo) {\n      onboardingRequest {\n        id\n        info {\n          email\n          organizationAddress\n          organizationName\n          organizationDesc\n          role\n          roleInfo {\n            aspInfo {\n              numKids\n            }\n            donorInfo {\n              type\n              tags\n            }\n          }\n          primaryContact {\n            name\n            phone\n            email\n          }\n          onsiteContacts {\n            name\n            phone\n            email\n          }\n        }\n        dateSubmitted\n        status\n      }\n    }\n  }\n": types.OnboardRequestDocument,
    "\n  mutation Login($email: String!, $password: String!, $idToken: String!) {\n    login(email: $email, password: $password, idToken: $idToken) {\n      registeredUser {\n        accessToken\n        id\n        info {\n          email\n          organizationAddress\n          organizationName\n          organizationDesc\n          role\n          roleInfo {\n            aspInfo {\n              numKids\n            }\n            donorInfo {\n              type\n              tags\n            }\n          }\n          primaryContact {\n            name\n            phone\n            email\n          }\n          onsiteContacts {\n            name\n            phone\n            email\n          }\n          active\n        }\n      }\n    }\n  }\n": types.LoginDocument,
    "\n  mutation Logout($userId: String!) {\n    logout(userId: $userId) {\n      success\n    }\n  }\n": types.LogoutDocument,
    "\n  mutation Refresh {\n    refresh {\n      accessToken\n    }\n  }\n": types.RefreshDocument,
    "query GetUserByID{\n    getUserById(id: \"\"\n      ) {\n      id\n      info {\n        email\n        organizationAddress\n        organizationName\n        organizationDesc\n        role\n        roleInfo {\n          aspInfo {\n            numKids\n          }\n          donorInfo {\n            type\n            tags\n          }\n        }\n        primaryContact {\n          name\n          phone\n          email\n        }\n        onsiteContacts {\n          name\n          phone\n          email\n        }\n      }\n    }\n  }": types.GetUserByIdDocument,
    "\n    mutation ResetPassword($email: String!, $password: String!) {\n      resetPassword(email: $email, password: $password) {\n        success\n      }\n    }\n  ": types.ResetPasswordDocument,
    "\n    query GetOnboardingRequestById{\n      getOnboardingRequestById(id: \"\"\n          \n        ) {\n        id\n        info {\n          email\n          organizationAddress\n          organizationName\n          organizationDesc\n          role\n          roleInfo {\n            aspInfo {\n              numKids\n            }\n            donorInfo {\n              type\n              tags\n            }\n          }\n          primaryContact {\n            name\n            phone\n            email\n          }\n          onsiteContacts {\n            name\n            phone\n            email\n          }\n        }\n        dateSubmitted\n        status\n      }\n    }\n  ": types.GetOnboardingRequestByIdDocument,
    "\n    mutation register(\n      $email: String!\n      $password: String!\n      $requestId: String!\n    ) {\n      register(email: $email, password: $password, requestId: $requestId) {\n        registeredUser {\n          accessToken\n          id\n          info {\n            email\n            organizationAddress\n            organizationName\n            organizationDesc\n            role\n            roleInfo {\n              aspInfo {\n                numKids\n              }\n              donorInfo {\n                type\n                tags\n              }\n            }\n            primaryContact {\n              name\n              phone\n              email\n            }\n            onsiteContacts {\n              name\n              phone\n              email\n            }\n          }\n        }\n      }\n    }\n  ": types.RegisterDocument,
    "\n  mutation UpdateUserById(\n    $requestorId: String!\n    $id: String!\n    $userInfo: UserInfoInput!\n  ) {\n    updateUserByID(requestorId: $requestorId, id: $id, userInfo: $userInfo) {\n      user {\n        id\n        info {\n          email\n          organizationAddress\n          organizationName\n          organizationDesc\n          role\n          roleInfo {\n            aspInfo {\n              numKids\n            }\n            donorInfo {\n              type\n              tags\n            }\n          }\n          primaryContact {\n            name\n            phone\n            email\n          }\n          onsiteContacts {\n            name\n            phone\n            email\n          }\n          active\n        }\n      }\n    }\n  }\n": types.UpdateUserByIdDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation ForgotPassword($email: String!) {\n      forgotPassword(email: $email) {\n        success\n      }\n    }\n  "): (typeof documents)["\n    mutation ForgotPassword($email: String!) {\n      forgotPassword(email: $email) {\n        success\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OnboardRequest($userInfo: UserInfoInput!) {\n    createOnboardingRequest(userInfo: $userInfo) {\n      onboardingRequest {\n        id\n        info {\n          email\n          organizationAddress\n          organizationName\n          organizationDesc\n          role\n          roleInfo {\n            aspInfo {\n              numKids\n            }\n            donorInfo {\n              type\n              tags\n            }\n          }\n          primaryContact {\n            name\n            phone\n            email\n          }\n          onsiteContacts {\n            name\n            phone\n            email\n          }\n        }\n        dateSubmitted\n        status\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation OnboardRequest($userInfo: UserInfoInput!) {\n    createOnboardingRequest(userInfo: $userInfo) {\n      onboardingRequest {\n        id\n        info {\n          email\n          organizationAddress\n          organizationName\n          organizationDesc\n          role\n          roleInfo {\n            aspInfo {\n              numKids\n            }\n            donorInfo {\n              type\n              tags\n            }\n          }\n          primaryContact {\n            name\n            phone\n            email\n          }\n          onsiteContacts {\n            name\n            phone\n            email\n          }\n        }\n        dateSubmitted\n        status\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Login($email: String!, $password: String!, $idToken: String!) {\n    login(email: $email, password: $password, idToken: $idToken) {\n      registeredUser {\n        accessToken\n        id\n        info {\n          email\n          organizationAddress\n          organizationName\n          organizationDesc\n          role\n          roleInfo {\n            aspInfo {\n              numKids\n            }\n            donorInfo {\n              type\n              tags\n            }\n          }\n          primaryContact {\n            name\n            phone\n            email\n          }\n          onsiteContacts {\n            name\n            phone\n            email\n          }\n          active\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Login($email: String!, $password: String!, $idToken: String!) {\n    login(email: $email, password: $password, idToken: $idToken) {\n      registeredUser {\n        accessToken\n        id\n        info {\n          email\n          organizationAddress\n          organizationName\n          organizationDesc\n          role\n          roleInfo {\n            aspInfo {\n              numKids\n            }\n            donorInfo {\n              type\n              tags\n            }\n          }\n          primaryContact {\n            name\n            phone\n            email\n          }\n          onsiteContacts {\n            name\n            phone\n            email\n          }\n          active\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Logout($userId: String!) {\n    logout(userId: $userId) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation Logout($userId: String!) {\n    logout(userId: $userId) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Refresh {\n    refresh {\n      accessToken\n    }\n  }\n"): (typeof documents)["\n  mutation Refresh {\n    refresh {\n      accessToken\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetUserByID{\n    getUserById(id: \"\"\n      ) {\n      id\n      info {\n        email\n        organizationAddress\n        organizationName\n        organizationDesc\n        role\n        roleInfo {\n          aspInfo {\n            numKids\n          }\n          donorInfo {\n            type\n            tags\n          }\n        }\n        primaryContact {\n          name\n          phone\n          email\n        }\n        onsiteContacts {\n          name\n          phone\n          email\n        }\n      }\n    }\n  }"): (typeof documents)["query GetUserByID{\n    getUserById(id: \"\"\n      ) {\n      id\n      info {\n        email\n        organizationAddress\n        organizationName\n        organizationDesc\n        role\n        roleInfo {\n          aspInfo {\n            numKids\n          }\n          donorInfo {\n            type\n            tags\n          }\n        }\n        primaryContact {\n          name\n          phone\n          email\n        }\n        onsiteContacts {\n          name\n          phone\n          email\n        }\n      }\n    }\n  }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation ResetPassword($email: String!, $password: String!) {\n      resetPassword(email: $email, password: $password) {\n        success\n      }\n    }\n  "): (typeof documents)["\n    mutation ResetPassword($email: String!, $password: String!) {\n      resetPassword(email: $email, password: $password) {\n        success\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetOnboardingRequestById{\n      getOnboardingRequestById(id: \"\"\n          \n        ) {\n        id\n        info {\n          email\n          organizationAddress\n          organizationName\n          organizationDesc\n          role\n          roleInfo {\n            aspInfo {\n              numKids\n            }\n            donorInfo {\n              type\n              tags\n            }\n          }\n          primaryContact {\n            name\n            phone\n            email\n          }\n          onsiteContacts {\n            name\n            phone\n            email\n          }\n        }\n        dateSubmitted\n        status\n      }\n    }\n  "): (typeof documents)["\n    query GetOnboardingRequestById{\n      getOnboardingRequestById(id: \"\"\n          \n        ) {\n        id\n        info {\n          email\n          organizationAddress\n          organizationName\n          organizationDesc\n          role\n          roleInfo {\n            aspInfo {\n              numKids\n            }\n            donorInfo {\n              type\n              tags\n            }\n          }\n          primaryContact {\n            name\n            phone\n            email\n          }\n          onsiteContacts {\n            name\n            phone\n            email\n          }\n        }\n        dateSubmitted\n        status\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation register(\n      $email: String!\n      $password: String!\n      $requestId: String!\n    ) {\n      register(email: $email, password: $password, requestId: $requestId) {\n        registeredUser {\n          accessToken\n          id\n          info {\n            email\n            organizationAddress\n            organizationName\n            organizationDesc\n            role\n            roleInfo {\n              aspInfo {\n                numKids\n              }\n              donorInfo {\n                type\n                tags\n              }\n            }\n            primaryContact {\n              name\n              phone\n              email\n            }\n            onsiteContacts {\n              name\n              phone\n              email\n            }\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation register(\n      $email: String!\n      $password: String!\n      $requestId: String!\n    ) {\n      register(email: $email, password: $password, requestId: $requestId) {\n        registeredUser {\n          accessToken\n          id\n          info {\n            email\n            organizationAddress\n            organizationName\n            organizationDesc\n            role\n            roleInfo {\n              aspInfo {\n                numKids\n              }\n              donorInfo {\n                type\n                tags\n              }\n            }\n            primaryContact {\n              name\n              phone\n              email\n            }\n            onsiteContacts {\n              name\n              phone\n              email\n            }\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUserById(\n    $requestorId: String!\n    $id: String!\n    $userInfo: UserInfoInput!\n  ) {\n    updateUserByID(requestorId: $requestorId, id: $id, userInfo: $userInfo) {\n      user {\n        id\n        info {\n          email\n          organizationAddress\n          organizationName\n          organizationDesc\n          role\n          roleInfo {\n            aspInfo {\n              numKids\n            }\n            donorInfo {\n              type\n              tags\n            }\n          }\n          primaryContact {\n            name\n            phone\n            email\n          }\n          onsiteContacts {\n            name\n            phone\n            email\n          }\n          active\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserById(\n    $requestorId: String!\n    $id: String!\n    $userInfo: UserInfoInput!\n  ) {\n    updateUserByID(requestorId: $requestorId, id: $id, userInfo: $userInfo) {\n      user {\n        id\n        info {\n          email\n          organizationAddress\n          organizationName\n          organizationDesc\n          role\n          roleInfo {\n            aspInfo {\n              numKids\n            }\n            donorInfo {\n              type\n              tags\n            }\n          }\n          primaryContact {\n            name\n            phone\n            email\n          }\n          onsiteContacts {\n            name\n            phone\n            email\n          }\n          active\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;